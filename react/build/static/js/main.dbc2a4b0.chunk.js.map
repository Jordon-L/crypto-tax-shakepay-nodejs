{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","root","width","button","color","background","textTransform","backgroundColor","instructions","marginTop","spacing","marginBottom","grid","breakpoints","down","inputCard","display","flexDirection","alignItems","up","inputCardAction","flexGrow","table","disabledAccordion","disabledAccordionSummary","opacity","moreDetail","marginLeft","TableDialog","props","openTable","onCloseTable","data","columns","classes","useState","page","setPage","rowsPerPage","setRowsPerPage","emptyRows","Math","min","length","Dialog","onClose","maxWidth","open","DialogTitle","id","DialogContent","DialogContentText","filename","Button","className","variant","component","TableContainer","Table","stickyHeader","aria-label","TableHead","TableRow","map","column","TableCell","field","title","TableBody","slice","row","value","style","height","colSpan","TableFooter","TablePagination","rowsPerPageOptions","label","count","onChangePage","event","newPage","onChangeRowsPerPage","target","MoreDetailDialog","openDetail","onCloseDetail","taxInfo","capitalGain","UserInput","selectedFile","setSelectedFile","shakepayWallet","setShakepayWallet","wallet","setWallet","setColumns","setData","setTaxInfo","loading","setLoading","error","setError","errorFile","setErrorFile","React","setOpenTable","setOpenDetail","errorEth","setErrorEth","Date","selectedDate","handleDateChange","today","year","getFullYear","month","getMonth","day","getDate","minDate","maxDate","class","Grid","container","justify","direction","item","xs","Card","CardContent","CardActions","utils","DateFnsUtils","DatePicker","onChange","views","Typography","type","name","files","document","getElementById","innerHTML","hidden","onClick","payload","FormData","append","console","log","axios","post","then","res","rows","CreateTable","info","JSON","parse","incomeGain","totalNumberETH","totalSalePriceETH","totalCostETH","totalFeesETH","totalGainsETH","totalNumberBTC","totalSalePriceBTC","totalCostBTC","totalFeesBTC","totalGainsBTC","Upload","CircularProgress","Accordion","disabled","AccordionSummary","aria-controls","expandIcon","AccordionDetails","Container","disableGutters","App","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"sjBAmCMA,EAAYC,aAAW,SAACC,GAAD,YAAY,CACrCC,KAAO,CACHC,MAAO,QAEXC,OAAQ,CACJC,MAAO,UACPC,WAAY,QACZC,cAAe,aACf,UAAW,CACPC,gBAAiB,UAGzBC,aAAc,CACVC,UAAWT,EAAMU,QAAQ,GACzBC,aAAcX,EAAMU,QAAQ,IAEhCE,KAAK,eACAZ,EAAMa,YAAYC,KAAK,MAAO,CAC3BZ,MAAO,SAGfa,WAAS,GACLC,QAAS,OACTC,cAAe,SACfC,WAAY,UAHP,cAKJlB,EAAMa,YAAYM,GAAG,MAAO,CACzBjB,MAAO,UANN,cAQJF,EAAMa,YAAYC,KAAK,MAAO,CAC3BZ,MAAO,SATN,GAYTkB,gBAAiB,CACbC,SAAU,EACVL,QAAS,OACTC,cAAe,UAEnBK,MAAQ,CACJpB,MAAO,UAEXqB,kBAAmB,CACfhB,gBAAkB,mBAEtBiB,yBAA0B,CACtBC,QAAU,gBAEdC,WAAY,CACRC,WAAY,aAapB,SAASC,EAAYC,GAAO,IACZC,EAA2CD,EAA3CC,UAAWC,EAAgCF,EAAhCE,aAAcC,EAAkBH,EAAlBG,KAAMC,EAAYJ,EAAZI,QACrCC,EAAUpC,IAFO,EAGCqC,mBAAS,GAHV,mBAGhBC,EAHgB,KAGVC,EAHU,OAIeF,mBAAS,IAJxB,mBAIhBG,EAJgB,KAIHC,EAJG,KAKjBC,EAAYF,EAAcG,KAAKC,IAAIJ,EAAaN,EAAKW,OAASP,EAAOE,GAQ3E,OACI,eAACM,EAAA,EAAD,CACIC,QAASd,EACTe,SAAW,SACXC,KAAMjB,EAHV,UAKI,cAACkB,EAAA,EAAD,CAAaC,GAAG,sBAAhB,+BACA,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,wEAID,cAAC,UAAD,CACOnB,KAAMA,EACNoB,SAAU,uBAFjB,SAIC,cAACC,EAAA,EAAD,CAAQC,UAAapB,EAAQ/B,OAC7BoD,QAAU,YACVC,UAAY,QAFZ,wBASA,cAACC,EAAA,EAAD,CAAgBH,UAAapB,EAAQZ,MAArC,SACI,eAACoC,EAAA,EAAD,CAAOC,cAAY,EAACC,aAAa,oBAAjC,UACI,cAACC,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,UACK7B,EAAQ8B,KAAI,SAACC,GAAD,OACT,cAACC,EAAA,EAAD,UACKD,EAAOE,OADMF,EAAOG,cAMrC,eAACC,EAAA,EAAD,YACM9B,EAAc,EACVN,EAAKqC,MAAMjC,EAAOE,EAAaF,EAAOE,EAAcA,GACpDN,GACJ+B,KAAI,SAACO,GACH,OACI,cAACR,EAAA,EAAD,UACK7B,EAAQ8B,KAAI,SAACC,GACV,IAAMO,EAAQD,EAAIN,EAAOE,OACzB,OACI,cAACD,EAAA,EAAD,UACKM,GADaP,EAAOG,eAQ5C3B,EAAY,GACT,cAACsB,EAAA,EAAD,CAAUU,MAAO,CAAEC,OAAQ,GAAKjC,GAAhC,SACI,cAACyB,EAAA,EAAD,CAAWS,QAAS,SAIhC,cAACC,EAAA,EAAD,UACI,cAACb,EAAA,EAAD,UACI,cAACc,EAAA,EAAD,CACIC,mBAAsB,CAAC,GAAG,GAAI,CAAEC,MAAO,MAAOP,OAAQ,IACtDQ,MAAS/C,EAAKW,OACdL,YAAeA,EACfF,KAAQA,EACR4C,aA1EP,SAACC,EAAOC,GAC7B7C,EAAQ6C,IA0EoBC,oBAxEA,SAACF,GAC7B1C,GAAgB0C,EAAMG,OAAOb,OAC7BlC,EAAQ,qBAiFhB,SAASgD,EAAiBxD,GAAO,IACrByD,EAAsCzD,EAAtCyD,WAAYC,EAA0B1D,EAA1B0D,cAAeC,EAAW3D,EAAX2D,QAEnC,OACI,eAAC5C,EAAA,EAAD,CACIC,QAAS0C,EACTzC,SAAW,SACXC,KAAMuC,EAHV,UAKI,cAACtC,EAAA,EAAD,wCACA,cAACE,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,UACKqC,EAAQC,mBAO7B,SAASC,IAAY,IA4BbpE,EA5BY,EACwBa,mBAAS,MADjC,mBACTwD,EADS,KACKC,EADL,OAE4BzD,mBAAS,MAFrC,mBAET0D,EAFS,KAEOC,EAFP,OAGY3D,mBAAS,MAHrB,mBAGT4D,EAHS,KAGDC,EAHC,OAIc7D,mBAAS,IAJvB,mBAITF,EAJS,KAIAgE,EAJA,OAKQ9D,mBAAS,IALjB,mBAKTH,EALS,KAKHkE,EALG,OAMc/D,mBAAS,IANvB,gCAOoBA,mBAAS,KAP7B,gCAQcA,mBAAS,KARvB,mBAQTqD,EARS,KAQAW,EARA,OASwBhE,oBAAS,GATjC,iCAU4BA,oBAAS,IAVrC,qCAW0BA,oBAAS,IAXnC,qCAYcA,oBAAS,IAZvB,qBAYTiE,GAZS,MAYAC,GAZA,SAaUlE,oBAAS,GAbnB,qBAaTmE,GAbS,MAaFC,GAbE,SAckBpE,oBAAS,GAd3B,qBAcTqE,GAdS,MAcEC,GAdF,SAekBC,IAAMvE,UAAS,GAfjC,qBAeTL,GAfS,MAeE6E,GAfF,SAgBoBD,IAAMvE,UAAS,GAhBnC,qBAgBTmD,GAhBS,MAgBGsB,GAhBH,SAiBgBF,IAAMvE,UAAS,GAjB/B,qBAiBT0E,GAjBS,MAiBCC,GAjBD,SAkByB3E,mBAAS,IAAI4E,MAlBtC,qBAkBTC,GAlBS,MAkBKC,GAlBL,MAoBZC,GAAQ,IAAIH,KAEZI,GAAOD,GAAME,cACbC,GAAQH,GAAMI,WACdC,GAAML,GAAMM,UACZC,GAAU,IAAIV,KAAKI,GAAO,EAAGE,GAAOE,IACpCG,GAAUR,GAIRhF,GAAUpC,IA8LhB,OAlKIwB,EADmB,IAAnBW,EAAQU,QAAgC,IAAhBX,EAAKW,OAE7B,qBAAKgF,MAAQ,UAAb,SACI,cAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,SAASC,UAAU,SACvC7G,WAAW,SADf,SAEI,cAAC0G,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAI3E,UAAapB,GAAQtB,KAAxC,SACI,cAACsH,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,CAAa7E,UAAYpB,GAAQnB,UAAjC,UACI,eAACqH,EAAA,EAAD,CAAa9E,UAAYpB,GAAQd,gBAAjC,kBAEO,cAAC,IAAD,CAAyBiH,MAAOC,IAAhC,SACC,cAACC,EAAA,EAAD,CACIhE,MAAOyC,GACPwB,SAAUvB,GACVwB,MAAO,CAAC,QACRhB,QAAUA,GACVC,QAAUA,UAItB,cAACgB,EAAA,EAAD,iCAGA,cAACN,EAAA,EAAD,CAAa9E,UAAYpB,GAAQd,gBAAjC,SACI,eAACiC,EAAA,EAAD,CAAQC,UAAapB,GAAQ/B,OACzBoD,QAAU,YACVC,UAAY,QAFhB,wBAKI,uBACIP,GAAK,YACL0F,KAAO,OACPH,SAAU,SAAAvD,GA5MlD,IAAyB2D,EA6MmBhD,EAAgBX,EAAMG,OAAOyD,MAAM,IA7MtDD,EA8MmC3D,EAAMG,OAAOyD,MAAM,GAAGD,KA7MxDE,SAASC,eAAe,gBAC9BC,UAAY,kBAAoBJ,GA8MZK,QAAM,SAIlB,cAACP,EAAA,EAAD,UACI,qBAAKzF,GAAK,eAAV,+BAEJ,cAACmF,EAAA,EAAD,CAAa9E,UAAWpB,GAAQd,gBAAhC,SACI,cAACiC,EAAA,EAAD,CAAQC,UAAapB,GAAQ/B,OAAQoD,QAAQ,YAAYnD,MAAO,UAAU8I,QAAS,kBA8HnH,SAAgBvD,EAAcI,EAAQF,EAAgBI,EAAYC,EAASC,EAAWE,EAAYP,EAAmBS,EAAUS,EAAcF,EAAaL,GACtJ,GAAmB,MAAhBd,GAAwC,MAAhBqB,EACvBT,GAAS,GACTF,GAAW,QAEV,GAAc,MAAVN,GAAoC,MAAlBF,GAAsC,MAAVE,GAAoC,IAAlBF,EACrEiB,GAAY,GACZT,GAAW,OAEX,CACAE,GAAS,GACTO,GAAY,GACZL,GAAa,GACbJ,GAAW,GACX,IAAM8C,EAAU,IAAIC,SACpBD,EAAQE,OAAO,OAAQ1D,GACvBwD,EAAQE,OAAO,SAAUtD,GACzBoD,EAAQE,OAAO,iBAAkBxD,GACjCyD,QAAQC,IAAIvC,EAAaI,eACzB+B,EAAQE,OAAO,OAAQrC,EAAaI,eACpCoC,IAAMC,KAAK,UAAWN,EAAS,IACxBO,MAAK,SAAAC,GACA,GAAqB,QAAlBA,EAAI3H,KAAKsE,MACRG,GAAa,GACbJ,GAAW,OAEX,EApXxB,SAAqBuD,EAAM3H,EAASgE,EAAYC,GAC5CD,EAAWhE,GACXiE,EAAQ0D,GAmXYC,CAAYF,EAAI3H,KAAKV,MAAOqI,EAAI3H,KAAKC,QAASgE,EAAYC,GAC1D,IAAM4D,EAAOC,KAAKC,MAAML,EAAI3H,KAAK8H,MACjC3D,EAAW,CACP8D,WAAYH,EAAKG,WACjBxE,YAAaqE,EAAKrE,YAClByE,eAAgBJ,EAAKI,eACrBC,kBAAmBL,EAAKK,kBACxBC,aAAcN,EAAKM,aACnBC,aAAcP,EAAKO,aACnBC,cAAeR,EAAKQ,cACpBC,eAAgBT,EAAKS,eACrBC,kBAAmBV,EAAKU,kBACxBC,aAAcX,EAAKW,aACnBC,aAAcZ,EAAKY,aACnBC,cAAeb,EAAKa,qBAtKhBC,CAAOjF,EAAcI,EAAQF,EAAeI,EAAYC,EAASC,EAAYE,GAAYP,EAAmBS,GAAUS,GAAcF,GAAaL,KADjJ,uBAGJ,cAACiC,EAAA,EAAD,UACI,8CAzCR,oHA4CI,eAACN,EAAA,EAAD,CAAa9E,UAAWpB,GAAQd,gBAAhC,uCAC8B,uBAAOuH,KAAK,OAAOC,KAAK,iBAAiBJ,SAAU,SAAAvD,GAAK,OAAIa,EAAkBb,EAAMG,OAAOb,aAEzH,eAAC6D,EAAA,EAAD,CAAa9E,UAAWpB,GAAQd,gBAAhC,8DACqD,uBAAOuH,KAAK,OAAOC,KAAK,SAASJ,SAAU,SAACvD,GAA0BA,EAAMG,OAAOb,MACpIyB,EAAUf,EAAMG,OAAOb,aAE3B,eAACmE,EAAA,EAAD,WACKtC,GAAU,cAACyE,EAAA,EAAD,IAAuB,GACjCvE,GAAQ,mCAAqC,GAC7CE,GAAY,0BAA4B,GACxCK,GAAW,kCAAoC,iBAUxE,sBAAKc,MAAQ,UAAb,UACI,cAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,SAASC,UAAU,SACvC7G,WAAW,SADf,SAEI,cAAC0G,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAI3E,UAAapB,GAAQtB,KAAxC,SACI,cAACsH,EAAA,EAAD,CAAM5E,UAAapB,GAAQnB,UAA3B,SACI,eAACoH,EAAA,EAAD,WACI,gCACI,cAAC2C,EAAA,EAAD,CAAWC,UAAQ,EAACzH,UAAapB,GAAQX,kBAAzC,SACI,cAACyJ,EAAA,EAAD,CACAC,gBAAc,kBACdhI,GAAG,iBACHK,UAAapB,GAAQV,yBAHrB,SAKI,eAACkH,EAAA,EAAD,sBACalD,EAAQyE,kBAI7B,eAACa,EAAA,EAAD,WACI,cAACE,EAAA,EAAD,CACAE,WAAY,cAAC,IAAD,IACZD,gBAAc,kBACdhI,GAAG,iBAHH,SAKI,eAACyF,EAAA,EAAD,4BACmBlD,EAAQC,iBAG9B,eAAC0F,EAAA,EAAD,WACG,eAACzC,EAAA,EAAD,CAAYpF,UAAWpB,GAAQR,WAA/B,gBAEK,eAACgH,EAAA,EAAD,yBACelD,EAAQ+E,kBAEvB,eAAC7B,EAAA,EAAD,0BACgBlD,EAAQgF,qBAExB,eAAC9B,EAAA,EAAD,0BACgBlD,EAAQiF,gBAExB,eAAC/B,EAAA,EAAD,0BACgBlD,EAAQkF,gBAExB,eAAChC,EAAA,EAAD,0BACgBlD,EAAQmF,oBAI7B,eAACjC,EAAA,EAAD,CAAYpF,UAAWpB,GAAQR,WAA/B,gBAEK,eAACgH,EAAA,EAAD,yBACelD,EAAQ0E,kBAEvB,eAACxB,EAAA,EAAD,0BACgBlD,EAAQ2E,qBAExB,eAACzB,EAAA,EAAD,0BACgBlD,EAAQ4E,gBAExB,eAAC1B,EAAA,EAAD,0BACgBlD,EAAQ6E,gBAExB,eAAC3B,EAAA,EAAD,0BACgBlD,EAAQ8E,0BAKtC,cAACQ,EAAA,EAAD,CAAWC,UAAQ,EAACzH,UAAapB,GAAQX,kBAAzC,SACK,cAACyJ,EAAA,EAAD,CACAC,gBAAc,kBACdhI,GAAG,iBACHK,UAAapB,GAAQV,yBAHrB,SAKI,eAACkH,EAAA,EAAD,+BACsBlD,EAAQyE,WAAoC,IAAtBzE,EAAQC,sBAKhE,cAAC2C,EAAA,EAAD,CAAa9E,UAAWpB,GAAQd,gBAAhC,SACI,cAACiC,EAAA,EAAD,CAAQC,UAAapB,GAAQ/B,OAAQoD,QAAQ,YAAYnD,MAAO,UAAU8I,QAvKzE,WACzBvC,IAAa,IAsKW,mDAMpB,cAAC/E,EAAD,CAAaE,UAAaA,GAAWC,aAzKpB,WACrB4E,IAAa,IAwK8D3E,KAAQA,EAAMC,QAAWA,IAChG,cAACoD,EAAD,CAAkBC,WAAcA,GAAYC,cAnK1B,WACtBqB,IAAc,IAkKsEpB,QAAWA,OAI/F,cAAC4F,EAAA,EAAD,CAAWC,gBAAc,EAACvI,SAAU,QAApC,SACKxB,I,IAsEEgK,E,4JAhBX,WAEI,OACA,eAAC1D,EAAA,EAAD,CAAMwD,WAAS,EAACC,gBAAc,EAACvI,SAAU,QAAQiF,UAAU,SAAS7G,WAAW,SAAS+B,GAAK,UAA7F,UACI,eAAC2E,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAIhF,GAAK,QAAxB,UACI,gDACA,sEAEJ,cAAC2E,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAIhF,GAAK,UAAxB,SACI,cAACyC,EAAD,a,GAXE6F,aCrdHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBhC,MAAK,YAAkD,IAA/CiC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFpD,SAASC,eAAe,SAM1ByC,M","file":"static/js/main.dbc2a4b0.chunk.js","sourcesContent":["import React, {Component, useState } from 'react'\nimport './App.css'\nimport axios from 'axios';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableFooter from '@material-ui/core/TableFooter';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Grid from '@material-ui/core/Grid';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { CSVLink } from \"react-csv\";\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport {\n  DatePicker,\n  MuiPickersUtilsProvider\n} from \"@material-ui/pickers\";\n\nconst useStyles = makeStyles((theme) => ({\n    root : {\n        width: '100%',\n    },\n    button: {\n        color: '#F7F7F7',\n        background: 'black',\n        textTransform: 'capitalize',\n        \"&:hover\": {\n            backgroundColor: 'black',\n        }\n    },\n    instructions: {\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n    },\n    grid:{\n        [theme.breakpoints.down('sm')]:{\n            width: '100%'\n        },\n    },\n    inputCard :{\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n\n        [theme.breakpoints.up('md')]:{\n            width: '960px'\n        },\n        [theme.breakpoints.down('sm')]:{\n            width: '100%'\n        },\n    },\n    inputCardAction :{\n        flexGrow: 1,\n        display: 'flex',\n        flexDirection: 'column'\n    },\n    table : {\n        width: '1500px'\n    },\n    disabledAccordion: {\n        backgroundColor : '#fff !important',\n    },\n    disabledAccordionSummary: {\n        opacity : '1 !important'\n    },\n    moreDetail :{\n        marginLeft: '0.5em'\n    },\n}));\n\n\nfunction CreateTable(rows ,columns, setColumns, setData){\n    setColumns(columns);\n    setData(rows);\n}\nfunction displayFileName(name){\n    var displayLocation = document.getElementById('selectedFile');\n    displayLocation.innerHTML = \"Selected File: \" + name;\n}\nfunction TableDialog(props){\n        const { openTable, onCloseTable, data, columns } = props;\n    const classes = useStyles();\n    const [page, setPage] = useState(0);\n    const [rowsPerPage, setRowsPerPage] = useState(10);\n    const emptyRows = rowsPerPage - Math.min(rowsPerPage, data.length - page * rowsPerPage);\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(+event.target.value); // + in front mean return the numeric representation of object\n        setPage(0);\n    };\n    return (\n        <Dialog\n            onClose={onCloseTable}\n            maxWidth = '1500px'\n            open={openTable}\n        >\n            <DialogTitle id=\"simple-dialog-title\">Transaction Table</DialogTitle>\n            <DialogContent>\n                <DialogContentText>\n                    Shakingsats is not displayed, but is calculated as Income\n                </DialogContentText>\n\n               <CSVLink\n                      data={data}\n                      filename={\"transactionTable.csv\"}\n                    >\n                <Button className = {classes.button}\n                variant = \"contained\"\n                component = \"label\"\n                >\n                    Download\n                </Button>\n                </CSVLink>\n\n\n                <TableContainer className = {classes.table}>\n                    <Table stickyHeader aria-label = \"transaction table\">\n                        <TableHead>\n                            <TableRow>\n                                {columns.map((column) => (\n                                    <TableCell key = {column.title}>\n                                        {column.field}\n                                    </TableCell>\n                                ))}\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {(rowsPerPage > 0\n                                ? data.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                                : data\n                            ).map((row) => {\n                                return(\n                                    <TableRow>\n                                        {columns.map((column) => {\n                                            const value = row[column.field]\n                                            return (\n                                                <TableCell key = {column.title}>\n                                                    {value}\n                                                </TableCell>\n                                            );\n                                        })}\n                                    </TableRow>\n                                );\n                            })}\n                            {emptyRows > 0 && (\n                                <TableRow style={{ height: 53 * emptyRows }}>\n                                    <TableCell colSpan={6} />\n                                </TableRow>\n                            )}\n                        </TableBody>\n                        <TableFooter>\n                            <TableRow>\n                                <TablePagination\n                                    rowsPerPageOptions = {[10,25, { label: 'All', value: -1 }]}\n                                    count = {data.length}\n                                    rowsPerPage = {rowsPerPage}\n                                    page = {page}\n                                    onChangePage = {handleChangePage}\n                                    onChangeRowsPerPage = {handleChangeRowsPerPage}\n                                />\n                            </TableRow>\n                        </TableFooter>\n                    </Table>\n                </TableContainer>\n            </DialogContent>\n        </Dialog>\n    )\n\n}\nfunction MoreDetailDialog(props){\n    const { openDetail, onCloseDetail, taxInfo} = props;\n\n    return (\n        <Dialog\n            onClose={onCloseDetail}\n            maxWidth = '1500px'\n            open={openDetail}\n        >\n            <DialogTitle>Breakdown of Capital Gain</DialogTitle>\n            <DialogContent>\n                <DialogContentText>\n                    {taxInfo.capitalGain}\n                </DialogContentText>\n            </DialogContent>\n        </Dialog>\n    )\n}\n\nfunction UserInput(){\n    const [selectedFile, setSelectedFile] = useState(null);\n    const [shakepayWallet, setShakepayWallet] = useState(null);\n    const [wallet, setWallet] = useState(null);\n    const [columns, setColumns] = useState([]);\n    const [data, setData] = useState([]);\n    const [taxData, setTaxData] = useState([]);\n    const [taxColumns, setTaxColumns] = useState([]);\n    const [taxInfo, setTaxInfo] = useState({});\n    const [displayTable, setDisplayTable] = useState(false);\n    const [displayCapital, setDisplayCapital] = useState(false);\n    const [displayIncome, setDisplayIncome] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(false);\n    const [errorFile, setErrorFile] = useState(false);\n    const [openTable, setOpenTable] = React.useState(false);\n    const [openDetail, setOpenDetail] = React.useState(false);\n    const [errorEth, setErrorEth] = React.useState(false);\n    const [selectedDate, handleDateChange] = useState(new Date());\n\n    let today = new Date();\n\n    let year = today.getFullYear();\n    let month = today.getMonth();\n    let day = today.getDate();\n    let minDate = new Date(year - 5, month, day);\n    let maxDate = today;\n\n    let table;\n\n    const classes = useStyles();\n    //const [page, setPage] = useState(0);\n    //const [rowsPerPage, setRowsPerPage] = useState(10);\n    //const emptyRows = rowsPerPage - Math.min(rowsPerPage, data.length - page * rowsPerPage);\n    //const handleChangePage = (event, newPage) => {\n    //    setPage(newPage);\n    //};\n\n    //const handleChangeRowsPerPage = (event) => {\n    //    setRowsPerPage(+event.target.value); // + in front mean return the numeric representation of object\n     //   setPage(0);\n    //};\n    // open table\n    const handleClickOpenTable = () => {\n        setOpenTable(true);\n    };\n\n    const handleCloseTable = () => {\n        setOpenTable(false);\n    };\n\n    const handleClickOpenDetail = () => {\n        setOpenDetail(true);\n    };\n    const handleCloseDetail = () => {\n        setOpenDetail(false);\n    };\n    if (columns.length === 0 && data.length === 0){\n        table =\n        <div class = \"content\">\n            <Grid container justify=\"center\" direction=\"column\"\n                alignItems=\"center\">\n                <Grid item xs={12} className = {classes.grid}>\n                    <Card>\n                        <CardContent className= {classes.inputCard}>\n                            <CardActions className= {classes.inputCardAction}>\n                                    Year:\n                                   <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                                    <DatePicker\n                                        value={selectedDate}\n                                        onChange={handleDateChange}\n                                        views={['year'] }\n                                        minDate= {minDate}\n                                        maxDate= {maxDate}\n                                    />\n                                </MuiPickersUtilsProvider>\n                            </CardActions>\n                            <Typography>\n                                Shakepay csv file:\n                            </Typography>\n                            <CardActions className= {classes.inputCardAction}>\n                                <Button className = {classes.button}\n                                    variant = \"contained\"\n                                    component = \"label\"\n                                    >\n                                    Choose File\n                                    <input\n                                        id = \"fileInput\"\n                                        type = \"file\"\n                                        onChange={event => {\n                                            setSelectedFile(event.target.files[0]);\n                                            displayFileName(event.target.files[0].name);\n                                        }}\n                                        hidden\n                                    />\n                                </Button>\n                            </CardActions>\n                            <Typography>\n                                <div id = \"selectedFile\">Selected File: </div>\n                            </Typography>\n                            <CardActions className={classes.inputCardAction}>\n                                <Button className = {classes.button} variant=\"contained\" color= \"primary\" onClick={() =>\n                                Upload(selectedFile, wallet, shakepayWallet,setColumns, setData, setTaxInfo, setLoading, setShakepayWallet, setError, selectedDate, setErrorEth, setErrorFile)}>Upload </Button>\n                            </CardActions>\n                            <Typography>\n                                <h4> Optional </h4>\n                            </Typography>\n                                Non-shakepay ethereum data will not be 100% accurate due to limited historical price data available on Coingecko.\n                            <CardActions className={classes.inputCardAction}>\n                                Shakepay Ethereum Wallet: <input type=\"text\" name=\"shakepayWallet\" onChange={event => setShakepayWallet(event.target.value)} />\n                            </CardActions>\n                            <CardActions className={classes.inputCardAction}>\n                                non-Shakepay Ethereum Wallets (comma separated): <input type=\"text\" name=\"wallet\" onChange={(event) => { const value = event.target.value;\n                                setWallet(event.target.value);}}/>\n                            </CardActions>\n                            <Typography>\n                                {loading ? <CircularProgress /> : \"\"}\n                                {error ? \"No csv selected or year is empty\" : \"\"}\n                                {errorFile ? \"Format incorrect in csv\" : \"\"}\n                                {errorEth ? \"Fill in Shakepay Wallet address\" : \"\"}\n                            </Typography>\n                        </CardContent>\n                    </Card>\n                </Grid>\n            </Grid>\n        </div>\n    }\n    else{\n        table =\n        <div class = \"content\">\n            <Grid container justify=\"center\" direction=\"column\"\n                alignItems=\"center\">\n                <Grid item xs={12} className = {classes.grid}>\n                    <Card className = {classes.inputCard}>\n                        <CardContent>\n                            <div>\n                                <Accordion disabled className = {classes.disabledAccordion}>\n                                    <AccordionSummary\n                                    aria-controls=\"panel1a-content\"\n                                    id=\"panel1a-header\"\n                                    className = {classes.disabledAccordionSummary}\n                                    >\n                                        <Typography>\n                                            Income: {taxInfo.incomeGain}\n                                        </Typography>\n                                     </AccordionSummary>\n                                </Accordion>\n                                <Accordion>\n                                    <AccordionSummary\n                                    expandIcon={<ExpandMoreIcon />}\n                                    aria-controls=\"panel2a-content\"\n                                    id=\"panel2a-header\"\n                                    >\n                                        <Typography>\n                                            Capital gain: {taxInfo.capitalGain}\n                                        </Typography>\n                                     </AccordionSummary>\n                                     <AccordionDetails>\n                                        <Typography className={classes.moreDetail}>\n                                            BTC\n                                             <Typography>\n                                                Total BTC: {taxInfo.totalNumberBTC}\n                                             </Typography>\n                                             <Typography>\n                                                Total Sale: {taxInfo.totalSalePriceBTC}\n                                             </Typography>\n                                             <Typography>\n                                                Total Cost: {taxInfo.totalCostBTC}\n                                             </Typography>\n                                             <Typography>\n                                                Total Fees: {taxInfo.totalFeesBTC}\n                                             </Typography>\n                                             <Typography>\n                                                Total Gain: {taxInfo.totalGainsBTC}\n                                             </Typography>\n                                        </Typography>\n\n                                        <Typography className={classes.moreDetail}>\n                                            ETH\n                                             <Typography>\n                                                Total ETH: {taxInfo.totalNumberETH}\n                                             </Typography>\n                                             <Typography>\n                                                Total Sale: {taxInfo.totalSalePriceETH}\n                                             </Typography>\n                                             <Typography>\n                                                Total Cost: {taxInfo.totalCostETH}\n                                             </Typography>\n                                             <Typography>\n                                                Total Fees: {taxInfo.totalFeesETH}\n                                             </Typography>\n                                             <Typography>\n                                                Total Gain: {taxInfo.totalGainsETH}\n                                             </Typography>\n                                        </Typography>\n                                     </AccordionDetails>\n                                </Accordion>\n                               <Accordion disabled className = {classes.disabledAccordion}>\n                                    <AccordionSummary\n                                    aria-controls=\"panel3a-content\"\n                                    id=\"panel3a-header\"\n                                    className = {classes.disabledAccordionSummary}\n                                    >\n                                        <Typography>\n                                            Taxable Income: {+taxInfo.incomeGain + +taxInfo.capitalGain * 0.5}\n                                        </Typography>\n                                     </AccordionSummary>\n                                </Accordion>\n                            </div>\n                            <CardActions className={classes.inputCardAction}>\n                                <Button className = {classes.button} variant=\"contained\" color= \"primary\" onClick={handleClickOpenTable}  >Display transaction table </Button>\n                            </CardActions>\n                        </CardContent>\n                    </Card>\n                </Grid>\n            </Grid>\n            <TableDialog openTable = {openTable} onCloseTable = {handleCloseTable} data = {data} columns = {columns} />\n            <MoreDetailDialog openDetail = {openDetail} onCloseDetail = {handleCloseDetail} taxInfo = {taxInfo} />\n        </div>\n    }\n    return (\n        <Container disableGutters maxWidth= \"false\" >\n            {table}\n        </Container>\n    )\n}\n\nfunction Upload(selectedFile, wallet, shakepayWallet ,setColumns, setData, setTaxInfo,setLoading, setShakepayWallet, setError, selectedDate, setErrorEth, setErrorFile){\n    if(selectedFile == null || selectedDate == null){\n        setError(true)\n        setLoading(false)\n    }\n    else if((wallet != null && shakepayWallet == null) || (wallet != null && shakepayWallet == \"\") ){\n        setErrorEth(true)\n        setLoading(false)\n    }\n    else{\n        setError(false)\n        setErrorEth(false)\n        setErrorFile(false)\n        setLoading(true)\n        const payload = new FormData()\n        payload.append('file', selectedFile)\n        payload.append('wallet', wallet)\n        payload.append('shakepayWallet', shakepayWallet)\n        console.log(selectedDate.getFullYear())\n        payload.append('year', selectedDate.getFullYear())\n        axios.post(\"/upload\", payload, {\n            }).then(res => {\n                    if(res.data.error == \"true\"){\n                        setErrorFile(true)\n                        setLoading(false)\n                    }\n                    else{\n                        CreateTable(res.data.table ,res.data.columns, setColumns, setData)\n                        const info = JSON.parse(res.data.info)\n                        setTaxInfo({\n                            incomeGain: info.incomeGain,\n                            capitalGain: info.capitalGain,\n                            totalNumberETH: info.totalNumberETH,\n                            totalSalePriceETH: info.totalSalePriceETH,\n                            totalCostETH: info.totalCostETH,\n                            totalFeesETH: info.totalFeesETH,\n                            totalGainsETH: info.totalGainsETH,\n                            totalNumberBTC: info.totalNumberBTC,\n                            totalSalePriceBTC: info.totalSalePriceBTC,\n                            totalCostBTC: info.totalCostBTC,\n                            totalFeesBTC: info.totalFeesBTC,\n                            totalGainsBTC: info.totalGainsBTC\n                            })\n                    }\n                })\n    }\n}\nclass App extends Component {\n\n    render(){\n\n        return (\n        <Grid Container disableGutters maxWidth= \"false\" direction=\"column\" alignItems=\"center\" id = \"website\">\n            <Grid item xs={12} id = \"title\">\n                <h1> Crypto gains </h1>\n                <h4> for Shakepay and Ethereum mining</h4>\n            </Grid>\n            <Grid item xs={12} id = \"results\">\n                <UserInput/>\n            </Grid>\n        </Grid>\n    );}\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}